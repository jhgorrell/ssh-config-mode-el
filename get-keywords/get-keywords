#!/usr/bin/env python3
#
# ssh-config-mode-el/get-keywords/get-keywords ---
#
# Extracts the list of keywords from "readconf.c"
#
# A better method would be to compile "readconf.c"
# into a python module and then grab the list from that.
# Using a regex works well enough for now.

from __future__ import (
    absolute_import,
    division,
    print_function,
    unicode_literals,
)

import argparse
import os
import pdb
import re
import sys

#####

DEBUG = None
VERBOSE = None
VERSION = ''

#####

# We want to match lines which look like this:
#
# { "userknownhostsfile2", oDeprecated },
# { "gssapiauthentication", oGssAuthentication },
#
# Skip the "oDeprecated" ones, but keep "oUnsupported".
# As they are still active, but compile time options.

#: Regex to match conf options from "readconf.c"
KEYWORD_RE = re.compile(
    " *{ *\"(?P<name>[a-z0-9]+)\" *, *(?P<opcode>o[a-z0-9]*) *}",
    re.IGNORECASE)

#: List of opcodes which shouldnt be included in the keyword list.
OPCODES_IGNORE = [
    "oDeprecated",
    "oUnsupported",
]


def main(raw_args):
    global DEBUG, VERBOSE, VERSION
    #
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.description = """
DESCRIPTION:

"""
    parser.epilog = """
EXAMPLES:

"""
    #
    g = parser.add_argument_group('GENERAL')
    g.add_argument("--debug", "-d",
                   action="store_true",
                   help=argparse.SUPPRESS)
    g.add_argument("--pdb",
                   action="store_true",
                   help=argparse.SUPPRESS)
    g.add_argument("--verbose", "-v",
                   action="store_true",
                   help="Be more verbose.")
    g.add_argument("--output-file", "-o",
                   help="Write output")

    #
    g = parser.add_argument_group('ARGS')
    g.add_argument("args", nargs="*",
                   help="The remaining args.")

    #
    args = parser.parse_args(raw_args)
    #
    if args.pdb:
        pdb.set_trace()
    if args.debug:
        DEBUG = args.debug
    if args.verbose:
        VERBOSE = args.verbose

    #
    keyword_set = set(['usekeychain'])

    #
    for arg in args.args:
        for line in open(arg).readlines():
            for m in KEYWORD_RE.finditer(line):
                #
                if DEBUG:
                    print("   {!r} = {!r}".format(m.group("name"), m.group("opcode")))
                # skip old options
                if m.group("opcode") in OPCODES_IGNORE:
                    continue
                #
                keyword_set.add(m.group("name"))

    #
    if args.output_file:
        with open(args.output_file, "w") as fh:
            fh.write("\n".join(sorted(keyword_set)) + "\n")
    else:
        print("\n".join(sorted(keyword_set)))


#
if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))

# Local Variables:
# mode: python
# End:
